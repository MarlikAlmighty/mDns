package main

{{ $name := .Name }}
{{ $operations := .Operations }}

import (

{{range $index, $op := .Operations}}
        {{ $found := false }}
        {{ range $i, $sop := $operations }}
            {{ if and (gt $i $index ) (eq $op.Package $sop.Package)}}
                {{ $found = true }}
            {{end}}
        {{end}}
        {{ if not $found }}
        api{{ pascalize $op.Package }} "{{$op.GenCommon.TargetImportPath}}/{{ $op.RootPackage }}/operations/{{ $op.Package }}"
        {{end}}
    {{end}}

	"github.com/go-openapi/loads"
	"log"
	"strconv"
)

func main() {

	c, err := config.New()
	if err != nil {
		log.Fatal("get environment keys", err)
	}

	if err := ssl.PullCerts(*c.CertDir, *c.Domain, *c.IPV4); err != nil {
		log.Fatal("generate certs", err)
	}

	core := app.New(c)

	var swaggerSpec *loads.Document
	if swaggerSpec, err = loads.Analyzed(restapi.SwaggerJSON, ""); err != nil {
		log.Fatal("loads swagger spec", err)
	}

    api := operations.New{{ pascalize .Name }}API(swaggerSpec)

	{{range .Operations}}
        api.{{ pascalize .Package }}{{ pascalize .Name }}Handler = api{{ pascalize .Package }}.{{ pascalize .Name }}HandlerFunc(core.{{ pascalize .Name }}Handler)
        {{- end}}

    server := {{ .APIPackage }}.NewServer(api)

	server.ConfigureAPI()

	var port int
	if port, err = strconv.Atoi(*c.HTTPPort); err != nil {
		log.Fatal("can't convert port from string", err)
	}

	server.Port = port

	if err := server.Serve(); err != nil {
		log.Fatal("start server", err)
	}
}