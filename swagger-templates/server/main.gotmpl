package main

{{ $name := .Name }}
{{ $operations := .Operations }}

import (

{{range $index, $op := .Operations}}
        {{ $found := false }}
        {{ range $i, $sop := $operations }}
            {{ if and (gt $i $index ) (eq $op.Package $sop.Package)}}
                {{ $found = true }}
            {{end}}
        {{end}}
        {{ if not $found }}
        api{{ pascalize $op.Package }} "{{$op.GenCommon.TargetImportPath}}/{{ $op.RootPackage }}/operations/{{ $op.Package }}"
        {{end}}
    {{end}}

    "go.uber.org/zap"
	"github.com/go-openapi/loads"
)

func main() {

	var (
		l   *zap.Logger
		err error
	)

	if l, err = zap.NewDevelopment(); err != nil {
		panic(err)
	}

	var c *config.Configuration
	if c, err = config.New(); err != nil {
		l.Fatal("get environment keys", zap.Error(err))
	}

	core := app.New(c, l)

	var swaggerSpec *loads.Document
	if swaggerSpec, err = loads.Analyzed(restapi.SwaggerJSON, ""); err != nil {
		l.Fatal("loads swagger spec", zap.Error(err))
	}

    api := operations.New{{ pascalize .Name }}API(swaggerSpec)

	{{range .Operations}}
        api.{{ pascalize .Package }}{{ pascalize .Name }}Handler = api{{ pascalize .Package }}.{{ pascalize .Name }}HandlerFunc(core.{{ pascalize .Name }}Handler)
        {{- end}}

    server := {{ .APIPackage }}.NewServer(api)

	server.ConfigureAPI()

	server.Port = int(c.HTTPPort)

	if err := server.Serve(); err != nil {
		l.Fatal("start server", zap.Error(err))
	}
}