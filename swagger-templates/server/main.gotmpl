package main

{{ $name := .Name }}
{{ $operations := .Operations }}

import (

{{range $index, $op := .Operations}}
        {{ $found := false }}
        {{ range $i, $sop := $operations }}
            {{ if and (gt $i $index ) (eq $op.Package $sop.Package)}}
                {{ $found = true }}
            {{end}}
        {{end}}
        {{ if not $found }}
        api{{ pascalize $op.Package }} "{{$op.GenCommon.TargetImportPath}}/{{ $op.RootPackage }}/operations/{{ $op.Package }}"
        {{end}}
    {{end}}

	"log"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"
	"github.com/go-openapi/loads"
)

func main() {

// get the configuration for the application through ENV
	cnf := config.New()
	if err := cnf.GetEnv(); err != nil {
		log.Fatalf("get environment keys: %v\n", err)
	}

	// start new map for domains record
	dataMap := data.New()

	// starting the application core
	core := app.New(dataMap, cnf)

	// new dns server
	dnsServer := dns.New(dataMap, cnf)

	// start dns server
	if err := dnsServer.Run(); err != nil {
		log.Fatalf("run dns service: %v", err)
	}

	// for stopping
	shutdown := make(chan os.Signal, 1)
	signal.Notify(shutdown, syscall.SIGINT, syscall.SIGTERM)

	// stop dns server
	go func() {
		for {
			select {
			case <-shutdown:
				if err := dnsServer.Close(); err != nil {
					log.Printf("stop dns service: %v", err)
					return
				}
			}
		}
	}()

	var (
		swaggerSpec *loads.Document
		err         error
	)


    if swaggerSpec, err = loads.Analyzed(restapi.SwaggerJSON, ""); err != nil {
    	log.Fatal("loads swagger spec", err)
    }

    api := operations.New{{ pascalize .Name }}API(swaggerSpec)

	{{range .Operations}}
        api.{{ pascalize .Package }}{{ pascalize .Name }}Handler = api{{ pascalize .Package }}.{{ pascalize .Name }}HandlerFunc(core.{{ pascalize .Name }}Handler)
        {{- end}}

    server := {{ .APIPackage }}.NewServer(api)

	server.ConfigureAPI()

	var port int
	if port, err = strconv.Atoi(cnf.HTTPPort); err != nil {
		log.Fatal("can't convert port from string", err)
	}

	server.GracefulTimeout = 3 * time.Second
	server.Port = port
	server.Host = cnf.HTTPHost

	if err = server.Serve(); err != nil {
		log.Fatal("start server", err)
	}
}