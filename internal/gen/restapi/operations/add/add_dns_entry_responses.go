// Code generated by go-swagger; DO NOT EDIT.

package add

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mdns/internal/gen/models"
)

// AddDNSEntryOKCode is the HTTP code returned for type AddDNSEntryOK
const AddDNSEntryOKCode int = 200

/*AddDNSEntryOK OK

swagger:response addDnsEntryOK
*/
type AddDNSEntryOK struct {

	/*
	  In: Body
	*/
	Payload *models.DNSEntry `json:"body,omitempty"`
}

// NewAddDNSEntryOK creates AddDNSEntryOK with default headers values
func NewAddDNSEntryOK() *AddDNSEntryOK {

	return &AddDNSEntryOK{}
}

// WithPayload adds the payload to the add Dns entry o k response
func (o *AddDNSEntryOK) WithPayload(payload *models.DNSEntry) *AddDNSEntryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add Dns entry o k response
func (o *AddDNSEntryOK) SetPayload(payload *models.DNSEntry) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddDNSEntryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddDNSEntryBadRequestCode is the HTTP code returned for type AddDNSEntryBadRequest
const AddDNSEntryBadRequestCode int = 400

/*AddDNSEntryBadRequest Bad request

swagger:response addDnsEntryBadRequest
*/
type AddDNSEntryBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Fail `json:"body,omitempty"`
}

// NewAddDNSEntryBadRequest creates AddDNSEntryBadRequest with default headers values
func NewAddDNSEntryBadRequest() *AddDNSEntryBadRequest {

	return &AddDNSEntryBadRequest{}
}

// WithPayload adds the payload to the add Dns entry bad request response
func (o *AddDNSEntryBadRequest) WithPayload(payload *models.Fail) *AddDNSEntryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add Dns entry bad request response
func (o *AddDNSEntryBadRequest) SetPayload(payload *models.Fail) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddDNSEntryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
