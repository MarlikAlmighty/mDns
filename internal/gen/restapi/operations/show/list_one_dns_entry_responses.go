// Code generated by go-swagger; DO NOT EDIT.

package show

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mdns/internal/gen/models"
)

// ListOneDNSEntryOKCode is the HTTP code returned for type ListOneDNSEntryOK
const ListOneDNSEntryOKCode int = 200

/*ListOneDNSEntryOK OK

swagger:response listOneDnsEntryOK
*/
type ListOneDNSEntryOK struct {

	/*
	  In: Body
	*/
	Payload *models.DNSEntry `json:"body,omitempty"`
}

// NewListOneDNSEntryOK creates ListOneDNSEntryOK with default headers values
func NewListOneDNSEntryOK() *ListOneDNSEntryOK {

	return &ListOneDNSEntryOK{}
}

// WithPayload adds the payload to the list one Dns entry o k response
func (o *ListOneDNSEntryOK) WithPayload(payload *models.DNSEntry) *ListOneDNSEntryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list one Dns entry o k response
func (o *ListOneDNSEntryOK) SetPayload(payload *models.DNSEntry) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListOneDNSEntryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListOneDNSEntryBadRequestCode is the HTTP code returned for type ListOneDNSEntryBadRequest
const ListOneDNSEntryBadRequestCode int = 400

/*ListOneDNSEntryBadRequest Bad request

swagger:response listOneDnsEntryBadRequest
*/
type ListOneDNSEntryBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Fail `json:"body,omitempty"`
}

// NewListOneDNSEntryBadRequest creates ListOneDNSEntryBadRequest with default headers values
func NewListOneDNSEntryBadRequest() *ListOneDNSEntryBadRequest {

	return &ListOneDNSEntryBadRequest{}
}

// WithPayload adds the payload to the list one Dns entry bad request response
func (o *ListOneDNSEntryBadRequest) WithPayload(payload *models.Fail) *ListOneDNSEntryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list one Dns entry bad request response
func (o *ListOneDNSEntryBadRequest) SetPayload(payload *models.Fail) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListOneDNSEntryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
