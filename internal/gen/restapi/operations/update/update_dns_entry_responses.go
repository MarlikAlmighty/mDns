// Code generated by go-swagger; DO NOT EDIT.

package update

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/MarlikAlmighty/mdns/internal/gen/models"
)

// UpdateDNSEntryOKCode is the HTTP code returned for type UpdateDNSEntryOK
const UpdateDNSEntryOKCode int = 200

/*UpdateDNSEntryOK OK

swagger:response updateDnsEntryOK
*/
type UpdateDNSEntryOK struct {

	/*
	  In: Body
	*/
	Payload *models.DNSEntry `json:"body,omitempty"`
}

// NewUpdateDNSEntryOK creates UpdateDNSEntryOK with default headers values
func NewUpdateDNSEntryOK() *UpdateDNSEntryOK {

	return &UpdateDNSEntryOK{}
}

// WithPayload adds the payload to the update Dns entry o k response
func (o *UpdateDNSEntryOK) WithPayload(payload *models.DNSEntry) *UpdateDNSEntryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update Dns entry o k response
func (o *UpdateDNSEntryOK) SetPayload(payload *models.DNSEntry) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateDNSEntryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateDNSEntryBadRequestCode is the HTTP code returned for type UpdateDNSEntryBadRequest
const UpdateDNSEntryBadRequestCode int = 400

/*UpdateDNSEntryBadRequest Bad request

swagger:response updateDnsEntryBadRequest
*/
type UpdateDNSEntryBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Answer `json:"body,omitempty"`
}

// NewUpdateDNSEntryBadRequest creates UpdateDNSEntryBadRequest with default headers values
func NewUpdateDNSEntryBadRequest() *UpdateDNSEntryBadRequest {

	return &UpdateDNSEntryBadRequest{}
}

// WithPayload adds the payload to the update Dns entry bad request response
func (o *UpdateDNSEntryBadRequest) WithPayload(payload *models.Answer) *UpdateDNSEntryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update Dns entry bad request response
func (o *UpdateDNSEntryBadRequest) SetPayload(payload *models.Answer) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateDNSEntryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
