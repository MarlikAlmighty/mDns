// Code generated by go-swagger; DO NOT EDIT.

package delete

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mdns/internal/gen/models"
)

// DeleteDNSEntryOKCode is the HTTP code returned for type DeleteDNSEntryOK
const DeleteDNSEntryOKCode int = 200

/*DeleteDNSEntryOK OK

swagger:response deleteDnsEntryOK
*/
type DeleteDNSEntryOK struct {
}

// NewDeleteDNSEntryOK creates DeleteDNSEntryOK with default headers values
func NewDeleteDNSEntryOK() *DeleteDNSEntryOK {

	return &DeleteDNSEntryOK{}
}

// WriteResponse to the client
func (o *DeleteDNSEntryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteDNSEntryBadRequestCode is the HTTP code returned for type DeleteDNSEntryBadRequest
const DeleteDNSEntryBadRequestCode int = 400

/*DeleteDNSEntryBadRequest Bad request

swagger:response deleteDnsEntryBadRequest
*/
type DeleteDNSEntryBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Fail `json:"body,omitempty"`
}

// NewDeleteDNSEntryBadRequest creates DeleteDNSEntryBadRequest with default headers values
func NewDeleteDNSEntryBadRequest() *DeleteDNSEntryBadRequest {

	return &DeleteDNSEntryBadRequest{}
}

// WithPayload adds the payload to the delete Dns entry bad request response
func (o *DeleteDNSEntryBadRequest) WithPayload(payload *models.Fail) *DeleteDNSEntryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete Dns entry bad request response
func (o *DeleteDNSEntryBadRequest) SetPayload(payload *models.Fail) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteDNSEntryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
