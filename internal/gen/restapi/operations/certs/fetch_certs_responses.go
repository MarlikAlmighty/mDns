// Code generated by go-swagger; DO NOT EDIT.

package certs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/MarlikAlmighty/mdns/internal/gen/models"
)

// FetchCertsOKCode is the HTTP code returned for type FetchCertsOK
const FetchCertsOKCode int = 200

/*FetchCertsOK OK

swagger:response fetchCertsOK
*/
type FetchCertsOK struct {

	/*
	  In: Body
	*/
	Payload *models.DNSEntry `json:"body,omitempty"`
}

// NewFetchCertsOK creates FetchCertsOK with default headers values
func NewFetchCertsOK() *FetchCertsOK {

	return &FetchCertsOK{}
}

// WithPayload adds the payload to the fetch certs o k response
func (o *FetchCertsOK) WithPayload(payload *models.DNSEntry) *FetchCertsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the fetch certs o k response
func (o *FetchCertsOK) SetPayload(payload *models.DNSEntry) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FetchCertsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FetchCertsBadRequestCode is the HTTP code returned for type FetchCertsBadRequest
const FetchCertsBadRequestCode int = 400

/*FetchCertsBadRequest Bad request

swagger:response fetchCertsBadRequest
*/
type FetchCertsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Answer `json:"body,omitempty"`
}

// NewFetchCertsBadRequest creates FetchCertsBadRequest with default headers values
func NewFetchCertsBadRequest() *FetchCertsBadRequest {

	return &FetchCertsBadRequest{}
}

// WithPayload adds the payload to the fetch certs bad request response
func (o *FetchCertsBadRequest) WithPayload(payload *models.Answer) *FetchCertsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the fetch certs bad request response
func (o *FetchCertsBadRequest) SetPayload(payload *models.Answer) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FetchCertsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
